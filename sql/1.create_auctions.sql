create table auctions (
    id bigint generated by default as identity primary key,
    name text not null,
    description text,
    slug text not null,
    owner_id uuid references auth.users not null,
    enabled boolean not null,
    estimate_max integer,
    estimate_min integer,
    featured boolean not null,
    start_amount integer not null default 0,
    start_date timestamp with time zone not null,
    end_date timestamp with time zone not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Update updated_at field each time the record is updated
create extension if not exists moddatetime schema extensions;

create trigger handle_updated_at
  before update
  on auctions
  for each row execute procedure moddatetime (updated_at);

-- Set row level security
alter table auctions enable row level security;

create policy "Auctions are public."
  on auctions
  for select using (
    true
  );

create policy "Users can create auctions."
  on auctions
  for insert with check (
    (auth.uid() = owner_id)
  );

create policy "Users can update their own auctions."
  on auctions
  for update using (
    (auth.uid() = owner_id)
  );

create policy "Users can delete their own auctions."
  on auctions
  for delete using (
    (auth.uid() = owner_id)
  );
